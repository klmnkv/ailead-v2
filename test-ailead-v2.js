/**
 * –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI.LEAD v2 –¥–ª—è Windows
 */

const axios = require('axios');
const readline = require('readline');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = process.env.API_URL || 'http://localhost:4000';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const c = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(msg, color = 'reset') {
  console.log(`${c[color]}${msg}${c.reset}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API
async function checkApiHealth() {
  try {
    log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...', 'cyan');
    const response = await axios.get(`${API_URL}/health`, { timeout: 5000 });

    if (response.status === 200) {
      log('‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç', 'green');
      log(`   URL: ${API_URL}`, 'blue');
      log(`   Response: ${JSON.stringify(response.data)}`, 'blue');
      return true;
    }
  } catch (error) {
    log('‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'red');
    if (error.code === 'ECONNREFUSED') {
      log('   –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd api && npm run dev', 'yellow');
    } else {
      log(`   –û—à–∏–±–∫–∞: ${error.message}`, 'red');
    }
    return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendTestMessage(accountId, leadId, message) {
  try {
    log('\nüì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...', 'cyan');
    log(`   Account ID: ${accountId}`, 'blue');
    log(`   Lead ID: ${leadId}`, 'blue');
    log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`, 'blue');

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    const response = await axios({
      method: 'POST',
      url: `${API_URL}/api/messages/send`,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      data: {
        account_id: parseInt(accountId),
        lead_id: parseInt(leadId),
        message_text: message,
        priority: 'high'
      },
      timeout: 10000
    });

    const result = response.data;

    log('\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å!', 'green');
    log(`   Job ID: ${result.job_id}`, 'bright');
    log(`   –°—Ç–∞—Ç—É—Å: ${result.status}`, 'green');
    log(`   Message ID: ${result.message_id}`, 'blue');

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await monitorJob(result.job_id);

    return true;
  } catch (error) {
    log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ', 'red');

    if (error.response) {
      log(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`, 'red');
      log(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data, null, 2)}`, 'red');
    } else if (error.request) {
      log(`   –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞`, 'red');
      log(`   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω: cd api && npm run dev`, 'yellow');
    } else {
      log(`   –û—à–∏–±–∫–∞: ${error.message}`, 'red');
    }

    return false;
  }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏
async function monitorJob(jobId, maxAttempts = 30) {
  log('\n‚è≥ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...', 'cyan');

  for (let i = 0; i < maxAttempts; i++) {
    try {
      const response = await axios.get(`${API_URL}/api/queue/job/${jobId}`);
      const job = response.data;

      process.stdout.write(`\r   –°—Ç–∞—Ç—É—Å: ${job.status.padEnd(15)} | –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxAttempts}   `);

      if (job.status === 'completed') {
        log('\n‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'green');

        if (job.result) {
          log(`   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${job.result.processing_time}ms`, 'blue');
        }

        log('\nüéâ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ amoCRM!', 'bright');
        return true;
      }

      if (job.status === 'failed') {
        log('\n‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π', 'red');

        if (job.failedReason) {
          log(`   –ü—Ä–∏—á–∏–Ω–∞: ${job.failedReason}`, 'red');
        }

        log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'yellow');
        log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ worker', 'yellow');
        log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –≤ –ë–î', 'yellow');
        log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Lead ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'yellow');

        return false;
      }

      // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
      await new Promise(resolve => setTimeout(resolve, 2000));

    } catch (error) {
      if (error.response && error.response.status === 404) {
        // Job –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
        continue;
      }
      log(`\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`, 'yellow');
      break;
    }
  }

  log('\n‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è (60 —Å–µ–∫—É–Ω–¥)', 'yellow');
  log('   –ó–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤–æ—Ä–∫–µ—Ä–∞.', 'yellow');
  return false;
}

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
async function prompt(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  return new Promise(resolve => {
    rl.question(question, answer => {
      rl.close();
      resolve(answer);
    });
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó', 'bright');
  log('‚ïë   AI.LEAD v2 Testing Script             ‚ïë', 'bright');
  log('‚ïë   Windows PowerShell Edition             ‚ïë', 'bright');
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù', 'bright');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');
  log('  –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê API –°–ï–†–í–ï–†–ê', 'bright');
  log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');

  const apiOk = await checkApiHealth();
  if (!apiOk) {
    log('\n‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'red');
    log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:', 'yellow');
    log('   cd api', 'yellow');
    log('   npm run dev', 'yellow');
    process.exit(1);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
  log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');
  log('  –®–ê–ì 2: –í–í–û–î –î–ê–ù–ù–´–•', 'bright');
  log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');

  const accountId = await prompt('\nüìù –í–≤–µ–¥–∏—Ç–µ Account ID: ') || '32181490';
  const leadId = await prompt('üìù –í–≤–µ–¥–∏—Ç–µ Lead ID: ') || '31666305';
  const message = await prompt('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (Enter –¥–ª—è default): ') ||
                  '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI.LEAD v2 ü§ñ';

  // –û—Ç–ø—Ä–∞–≤–∫–∞
  log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');
  log('  –®–ê–ì 3: –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø', 'bright');
  log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');

  const success = await sendTestMessage(accountId, leadId, message);

  // –ò—Ç–æ–≥–∏
  log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');
  log('  –†–ï–ó–£–õ–¨–¢–ê–¢', 'bright');
  log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');

  if (success) {
    log('\n‚ú® –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'green');
  } else {
    log('\n‚ö†Ô∏è  –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏', 'yellow');
  }

  log('');
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  console.error(error);
  process.exit(1);
});