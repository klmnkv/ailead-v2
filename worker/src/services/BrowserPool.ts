import puppeteer, { Browser, Page } from 'puppeteer';
import { logger } from '../utils/logger.js';

interface PageContext {
  page: Page;
  lastUsed: number;
  accountId: number;
  leadId: number;
}

interface BrowserPoolConfig {
  minBrowsers?: number;
  maxBrowsers?: number;
  maxPagesPerBrowser?: number;
  pageTimeout?: number;
  reusePages?: boolean;
}

class BrowserPool {
  private browsers: Browser[] = [];
  private pageContexts: Map<string, PageContext> = new Map();
  private config: Required<BrowserPoolConfig>;
  private cleanupInterval?: NodeJS.Timeout;

  constructor(config: BrowserPoolConfig = {}) {
    this.config = {
      minBrowsers: config.minBrowsers || 1,
      maxBrowsers: config.maxBrowsers || 3,
      maxPagesPerBrowser: config.maxPagesPerBrowser || 10,
      pageTimeout: config.pageTimeout || 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
      reusePages: config.reusePages !== undefined ? config.reusePages : true
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
   */
  async initialize() {
    logger.info('üöÄ Initializing browser pool...', this.config);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤
    for (let i = 0; i < this.config.minBrowsers; i++) {
      await this.createBrowser();
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
    this.startCleanup();

    logger.info(`‚úÖ Browser pool initialized with ${this.browsers.length} browsers`);
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
   */
  private async createBrowser(): Promise<Browser> {
    const browser = await puppeteer.launch({
      headless: true,
      executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || undefined,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--disable-gpu',
        '--window-size=1920,1080',
        '--disable-web-security',
        '--disable-features=IsolateOrigins,site-per-process'
      ]
    });

    this.browsers.push(browser);
    logger.info(`Browser created. Total browsers: ${this.browsers.length}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    browser.on('disconnected', () => {
      this.browsers = this.browsers.filter(b => b !== browser);
      logger.warn(`Browser disconnected. Remaining: ${this.browsers.length}`);
    });

    return browser;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ª–∏–¥–∞
   */
  async getPage(accountId: number, leadId: number): Promise<Page> {
    const key = `${accountId}:${leadId}`;

    // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (this.browsers.length === 0) {
      logger.warn('‚ö†Ô∏è  Browser pool not initialized, initializing now...');
      await this.initialize();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ª–∏–¥–∞
    if (this.config.reusePages && this.pageContexts.has(key)) {
      const context = this.pageContexts.get(key)!;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â—ë –≤–∞–ª–∏–¥–Ω–∞
      if (!context.page.isClosed()) {
        context.lastUsed = Date.now();
        logger.debug(`Reusing page for ${key}`);
        return context.page;
      } else {
        this.pageContexts.delete(key);
      }
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const page = await this.createPage(accountId, leadId);

    if (this.config.reusePages) {
      this.pageContexts.set(key, {
        page,
        lastUsed: Date.now(),
        accountId,
        leadId
      });
    }

    return page;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
   */
  private async createPage(accountId: number, leadId: number): Promise<Page> {
    let browser = this.browsers[0];

    // –í—ã–±–∏—Ä–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü
    if (this.browsers.length > 1) {
      const browserPages = await Promise.all(
        this.browsers.map(async b => ({
          browser: b,
          count: (await b.pages()).length
        }))
      );

      browser = browserPages.sort((a, b) => a.count - b.count)[0].browser;
    }

    // –ï—Å–ª–∏ –≤–æ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
    const currentPages = await browser.pages();
    if (currentPages.length >= this.config.maxPagesPerBrowser) {
      if (this.browsers.length < this.config.maxBrowsers) {
        browser = await this.createBrowser();
      } else {
        logger.warn(`Reached max browsers (${this.config.maxBrowsers}), reusing existing`);
      }
    }

    const page = await browser.newPage();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await this.setupPage(page);

    logger.info(`Created new page for account ${accountId}, lead ${leadId}`);

    return page;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (user agent, viewport, etc.)
   */
  private async setupPage(page: Page) {
    // User Agent
    await page.setUserAgent(
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    );

    // Viewport
    await page.setViewport({
      width: 1920,
      height: 1080
    });

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await page.setRequestInterception(true);
    page.on('request', (req) => {
      const resourceType = req.resourceType();
      if (['image', 'stylesheet', 'font', 'media'].includes(resourceType)) {
        req.abort();
      } else {
        req.continue();
      }
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
   */
  private startCleanup() {
    this.cleanupInterval = setInterval(() => {
      this.cleanup();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  private async cleanup() {
    const now = Date.now();
    const pagesToDelete: string[] = [];

    for (const [key, context] of this.pageContexts.entries()) {
      const idleTime = now - context.lastUsed;

      if (idleTime > this.config.pageTimeout) {
        try {
          if (!context.page.isClosed()) {
            await context.page.close();
            logger.info(`Closed idle page: ${key} (idle: ${Math.round(idleTime / 1000)}s)`);
          }
          pagesToDelete.push(key);
        } catch (err) {
          logger.error(`Error closing page ${key}:`, err);
        }
      }
    }

    for (const key of pagesToDelete) {
      this.pageContexts.delete(key);
    }

    if (pagesToDelete.length > 0) {
      logger.info(`Cleanup: removed ${pagesToDelete.length} idle pages`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞
   */
  async getStats() {
    const activeBrowsers = this.browsers.length;
    let totalPages = 0;
    let healthyBrowsers = 0;

    for (const browser of this.browsers) {
      try {
        const pages = await browser.pages();
        totalPages += pages.length;
        healthyBrowsers++;
      } catch (err) {
        logger.error('Browser health check failed:', err);
      }
    }

    return {
      browsers: activeBrowsers,
      healthyBrowsers,
      totalPages,
      cachedPages: this.pageContexts.size,
      config: this.config
    };
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã
   */
  async closeAll() {
    logger.info('Closing all browsers...');

    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
    }

    for (const browser of this.browsers) {
      try {
        await browser.close();
      } catch (err) {
        logger.error('Error closing browser:', err);
      }
    }

    this.browsers = [];
    this.pageContexts.clear();

    logger.info('All browsers closed');
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—É–ª –±—Ä–∞—É–∑–µ—Ä–æ–≤
   */
  async restart() {
    logger.info('Restarting browser pool...');
    await this.closeAll();
    await this.initialize();
  }
}

// Singleton instance
export const browserPool = new BrowserPool({
  minBrowsers: parseInt(process.env.MIN_BROWSERS || '1'),
  maxBrowsers: parseInt(process.env.MAX_BROWSERS || '3'),
  maxPagesPerBrowser: parseInt(process.env.MAX_PAGES_PER_BROWSER || '10')
});