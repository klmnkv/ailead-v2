import { Page } from 'puppeteer';
import { logger } from '../utils/logger.js';

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è amoCRM
const SELECTORS = {
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  authForm: '#authentication',

  // –û–∫–Ω–æ —á–∞—Ç–∞
  feedCompose: '.feed-compose',

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —á–∞—Ç/–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ/–∑–∞–¥–∞—á–∞
  composeSwitcher: '.feed-compose-switcher',
  chatOption: '[data-id="chat"]',
  noteOption: '[data-id="note"]',
  taskOption: '[data-id="task"]',

  // –ß–∞—Ç
  userSelector: '.feed-compose-user__name',
  recipientItem: '.multisuggest__suggest-item',
  messageInput: '.control-contenteditable__area.feed-compose__message',
  sendButton: '.js-note-submit.feed-note__button',

  // –ó–∞–¥–∞—á–∞
  taskInput: '.control-contenteditable__area',
  taskButton: '.feed-note__button'
};

interface Credentials {
  base_url: string;
  email: string;
  password: string;
}

export class AmoCRMClient {
  constructor(
    private page: Page,
    private baseUrl: string,
    private credentials: Credentials
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async ensureAuthorized(): Promise<void> {
    const isAuthPage = await this.page.$(SELECTORS.authForm);

    if (isAuthPage) {
      logger.info('Not authorized, logging in via form...');
      await this.loginWithForm();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
      await this.page.waitForTimeout(3000);
      const stillAuthPage = await this.page.$(SELECTORS.authForm);
      if (stillAuthPage) {
        await this.takeScreenshot(`login_failed_${Date.now()}.png`);
        throw new Error('Authorization failed - still on auth page');
      }

      logger.info('Authorization successful');
    }
  }

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
 */
private async loginWithForm(): Promise<void> {
  logger.info('Logging in via form...', {
    email: this.credentials.email?.substring(0, 3) + '***'
  });

  try {
    // –ñ–¥–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const emailSelector = 'input[name="username"], input[type="email"], input[name="login"]';
    const passwordSelector = 'input[name="password"], input[type="password"]';

    await this.page.waitForSelector(emailSelector, { timeout: 10000 });

    // üî• –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º email –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    logger.info('Clearing and filling email field...');

    await this.page.evaluate((selector, email) => {
      const input = document.querySelector(selector) as HTMLInputElement;
      if (input) {
        // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤
        input.value = '';
        input.defaultValue = '';

        // –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        input.setAttribute('autocomplete', 'off');

        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è
        input.focus();

        // –í—ã–¥–µ–ª—è–µ–º –≤—Å—ë –∏ —É–¥–∞–ª—è–µ–º
        input.select();
        document.execCommand('delete');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        input.value = email;

        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.dispatchEvent(new Event('change', { bubbles: true }));
        input.dispatchEvent(new KeyboardEvent('keyup', { bubbles: true }));
      }
    }, emailSelector, this.credentials.email);

    await this.page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ email –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const emailValue = await this.page.$eval(
      emailSelector,
      (el: any) => el.value
    );

    logger.info('Email field value:', emailValue);

    if (emailValue !== this.credentials.email) {
      logger.warn('Email value mismatch! Trying alternative method...');

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ click + keyboard
      await this.page.click(emailSelector, { clickCount: 3 }); // –¢—Ä–æ–π–Ω–æ–π –∫–ª–∏–∫ –≤—ã–¥–µ–ª—è–µ—Ç –≤—Å—ë
      await this.page.keyboard.press('Backspace');
      await this.page.waitForTimeout(200);
      await this.page.keyboard.type(this.credentials.email, { delay: 50 });
      await this.page.waitForTimeout(500);

      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      const emailValueRetry = await this.page.$eval(
        emailSelector,
        (el: any) => el.value
      );

      logger.info('Email field value after retry:', emailValueRetry);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∏–ª–∏ —Å—Ä–∞–∑—É –ø–∞—Ä–æ–ª—å
    const submitButton = await this.page.$('button[type="submit"]');

    // –ñ–¥–µ–º –ø–∞—Ä–æ–ª—å (–æ–Ω –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ "–î–∞–ª–µ–µ")
    const passwordExists = await this.page.$(passwordSelector);

    if (submitButton && !passwordExists) {
      const buttonText = await this.page.evaluate(
        (btn) => (btn as HTMLElement).innerText,
        submitButton
      );
      logger.info('Submit button found:', buttonText);

      // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" - –∫–ª–∏–∫–∞–µ–º
      if (buttonText.includes('–î–∞–ª–µ–µ') || buttonText.includes('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å') || buttonText.includes('Next')) {
        logger.info('Clicking "Next" button...');
        await submitButton.click();
        await this.page.waitForTimeout(2000);
      }
    }

    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
    await this.page.waitForSelector(passwordSelector, { timeout: 10000 });

    // üî• –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    logger.info('Clearing and filling password field...');

    await this.page.evaluate((selector, password) => {
      const input = document.querySelector(selector) as HTMLInputElement;
      if (input) {
        // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        input.value = '';
        input.defaultValue = '';

        // –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        input.setAttribute('autocomplete', 'off');

        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è
        input.focus();

        // –í—ã–¥–µ–ª—è–µ–º –≤—Å—ë –∏ —É–¥–∞–ª—è–µ–º
        input.select();
        document.execCommand('delete');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        input.value = password;

        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.dispatchEvent(new Event('change', { bubbles: true }));
        input.dispatchEvent(new KeyboardEvent('keyup', { bubbles: true }));
      }
    }, passwordSelector, this.credentials.password);

    await this.page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–∞–º –ø–∞—Ä–æ–ª—å!)
    const passwordLength = await this.page.$eval(
      passwordSelector,
      (el: any) => el.value.length
    );

    logger.info('Password field length:', passwordLength);

    if (passwordLength !== this.credentials.password.length) {
      logger.warn('Password length mismatch! Expected:', this.credentials.password.length, 'Got:', passwordLength);
    }

    // üî• –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï –ö–ê–ü–ß–ò
    const hasCaptcha = await this.page.evaluate(() => {
      return !!(
        document.querySelector('.g-recaptcha') ||
        document.querySelector('[data-sitekey]') ||
        document.querySelector('iframe[src*="recaptcha"]') ||
        document.querySelector('iframe[src*="captcha"]') ||
        document.querySelector('.captcha')
      );
    });

    if (hasCaptcha) {
      logger.warn('‚ö†Ô∏è Captcha detected! Waiting 30 seconds for manual solving...');
      await this.takeScreenshot(`captcha_detected_${Date.now()}.png`);
      await this.page.waitForTimeout(30000);
    }

    // –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    const loginButton = await this.page.$('button[type="submit"]');
    if (loginButton) {
      logger.info('Clicking login button...');
      await loginButton.click();
    } else {
      // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º Enter
      logger.info('Login button not found, pressing Enter...');
      await this.page.keyboard.press('Enter');
    }

    // üî• –ì–ò–ë–ö–û–ï –û–ñ–ò–î–ê–ù–ò–ï –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
    logger.info('Waiting for navigation after login...');

    await Promise.race([
      // –ñ–¥–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      this.page.waitForNavigation({
        waitUntil: 'networkidle2',
        timeout: 45000
      }),
      // –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
      this.page.waitForFunction(
        () => !document.querySelector('#authentication'),
        { timeout: 45000 }
      ),
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      this.page.waitForFunction(
        () => {
          return !!(
            document.querySelector('.top-menu') ||
            document.querySelector('.nav-menu') ||
            document.querySelector('.feed-compose') ||
            document.querySelector('.pipeline-selector')
          );
        },
        { timeout: 45000 }
      )
    ]).catch((error) => {
      logger.warn('Wait timeout after login:', error.message);
      logger.warn('Continuing anyway - page may have loaded');
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await this.page.waitForTimeout(2000);

    logger.info('Login form submitted successfully');

  } catch (error: any) {
    logger.error('Failed to login via form:', error.message);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const diagnostics = await this.page.evaluate(() => {
      const emailInput = document.querySelector('input[name="username"], input[type="email"], input[name="login"]') as HTMLInputElement;
      const passwordInput = document.querySelector('input[name="password"], input[type="password"]') as HTMLInputElement;

      return {
        url: window.location.href,
        emailValue: emailInput?.value || 'not found',
        emailLength: emailInput?.value.length || 0,
        passwordLength: passwordInput?.value.length || 0,
        hasAuthForm: !!document.querySelector('#authentication'),
        visibleText: document.body.innerText.substring(0, 300)
      };
    }).catch(() => ({ error: 'Could not get diagnostics' }));

    logger.error('Login diagnostics:', diagnostics);
    await this.takeScreenshot(`login_error_${Date.now()}.png`);
    throw new Error(`Login failed: ${error.message}`);
  }
}

  /**
   * –û—Ç–∫—Ä—ã—Ç–∏–µ –ª–∏–¥–∞
   */
  async openLead(leadId: number): Promise<void> {
    const targetUrl = `${this.baseUrl}/leads/detail/${leadId}`;
    const currentUrl = this.page.url();

    try {
      // –ï—Å–ª–∏ —É–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
      if (currentUrl.includes(`/leads/detail/${leadId}`)) {
        logger.info(`Already on lead ${leadId} page`);
      } else {
        logger.info(`Opening lead ${leadId}...`);
        await this.page.goto(targetUrl, {
          waitUntil: 'networkidle2',
          timeout: 30000
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
      await this.ensureAuthorized();
      await this.page.waitForTimeout(3000);

      logger.info(`Lead ${leadId} opened successfully`);
    } catch (error) {
      logger.error(`Failed to open lead ${leadId}:`, error);
      await this.takeScreenshot(`error_open_lead_${leadId}_${Date.now()}.png`);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ–∫–Ω–∞ —á–∞—Ç–∞
   */
  private async expandChatIfMinimized(): Promise<void> {
    logger.info('Checking if chat is minimized...');

    try {
      const chatState = await this.page.evaluate((selector) => {
        const feedCompose = document.querySelector(selector);
        if (!feedCompose) {
          return { exists: false, minimized: false, classes: '' };
        }

        const classes = feedCompose.className;
        const isMinimized = feedCompose.classList.contains('minimized');

        return {
          exists: true,
          minimized: isMinimized,
          classes: classes
        };
      }, SELECTORS.feedCompose);

      logger.info('Chat state:', chatState);

      if (!chatState.exists) {
        logger.error('Feed compose element not found!');
        await this.takeScreenshot(`error_no_feed_compose_${Date.now()}.png`);
        throw new Error('Chat compose area not found');
      }

      if (!chatState.minimized) {
        logger.info('Chat is already expanded');
        return;
      }

      logger.info('Chat is minimized, expanding...');

      // üî• –ù–û–í–´–ô –ü–û–î–•–û–î: –ö–ª–∏–∫–∞–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —á–∞—Ç–∞ —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å
      const expanded = await this.page.evaluate((selector) => {
        const feedCompose = document.querySelector(selector);
        if (!feedCompose) return false;

        // –ò—â–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        // –û–±—ã—á–Ω–æ —ç—Ç–æ .feed-compose__before –∏–ª–∏ —Å–∞–º feedCompose
        const expandTrigger = feedCompose.querySelector('.feed-compose__before') ||
                             feedCompose.querySelector('.feed-compose-switcher') ||
                             feedCompose;

        if (expandTrigger) {
          // –ö–ª–∏–∫–∞–µ–º –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
          (expandTrigger as HTMLElement).click();

          // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
          feedCompose.classList.remove('minimized');

          return true;
        }

        return false;
      }, SELECTORS.feedCompose);

      if (!expanded) {
        logger.warn('Could not find expand trigger, trying direct class removal...');

        // –°–ø–æ—Å–æ–± 2: –ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
        await this.page.evaluate((selector) => {
          const feedCompose = document.querySelector(selector);
          if (feedCompose) {
            feedCompose.classList.remove('minimized');

            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è
            feedCompose.dispatchEvent(new Event('click', { bubbles: true }));
            feedCompose.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
            feedCompose.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –≤–∏–¥–∏–º—ã–º
            const style = (feedCompose as HTMLElement).style;
            style.display = 'block';
            style.visibility = 'visible';
            style.opacity = '1';
          }
        }, SELECTORS.feedCompose);
      }

      // –ñ–¥—ë–º –∞–Ω–∏–º–∞—Ü–∏–∏
      await this.page.waitForTimeout(1500);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const finalState = await this.page.evaluate((selector) => {
        const feedCompose = document.querySelector(selector);
        const isMinimized = feedCompose?.classList.contains('minimized') || false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const messageInput = feedCompose?.querySelector('.control-contenteditable__area');
        const sendButton = feedCompose?.querySelector('.js-note-submit');

        return {
          minimized: isMinimized,
          messageInputExists: !!messageInput,
          messageInputVisible: messageInput ? (messageInput as HTMLElement).offsetHeight > 0 : false,
          sendButtonExists: !!sendButton,
          sendButtonVisible: sendButton ? (sendButton as HTMLElement).offsetHeight > 0 : false,
          classes: feedCompose?.className || ''
        };
      }, SELECTORS.feedCompose);

      logger.info('Final chat state after expansion:', finalState);

      if (finalState.minimized) {
        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∫–ª–∏–∫–∞–µ–º –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ –≤–Ω—É—Ç—Ä–∏ feed-compose
        logger.warn('Still minimized, trying to click anywhere inside...');

        await this.page.evaluate((selector) => {
          const feedCompose = document.querySelector(selector) as HTMLElement;
          if (feedCompose) {
            // –ö–ª–∏–∫–∞–µ–º –ø–æ —Å–∞–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            feedCompose.click();

            // –ò –ø–æ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
            const inner = feedCompose.querySelector('.feed-compose__inner') as HTMLElement;
            if (inner) inner.click();

            // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –µ—â—ë —Ä–∞–∑
            feedCompose.classList.remove('minimized');
          }
        }, SELECTORS.feedCompose);

        await this.page.waitForTimeout(1000);

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        const lastCheck = await this.page.evaluate((selector) => {
          const feedCompose = document.querySelector(selector);
          return feedCompose?.classList.contains('minimized') || false;
        }, SELECTORS.feedCompose);

        if (lastCheck) {
          logger.error('Failed to expand chat after all attempts');
          await this.takeScreenshot(`error_cant_expand_chat_${Date.now()}.png`);
          throw new Error('Failed to expand chat interface - still minimized');
        }
      }

      if (!finalState.messageInputVisible || !finalState.sendButtonVisible) {
        logger.error('Chat expanded but elements not visible');
        await this.takeScreenshot(`error_elements_not_visible_${Date.now()}.png`);
        throw new Error('Chat elements not visible after expansion');
      }

      logger.info('‚úÖ Chat expanded successfully - all elements are visible');
    } catch (error: any) {
      logger.error('Error expanding chat:', error);
      await this.takeScreenshot(`error_expanding_chat_${Date.now()}.png`);
      throw error;
    }
  }


  /**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
 */
async openChat(): Promise<void> {
  logger.info('Opening chat...');

  try {
    // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞ —á–∞—Ç–∞
    await this.page.waitForSelector(SELECTORS.feedCompose, {
      timeout: 10000
    });

    // üî• –ö–†–ò–¢–ò–ß–ù–û: –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ
    await this.expandChatIfMinimized();

    // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    await this.page.waitForSelector(SELECTORS.composeSwitcher, {
      visible: true,
      timeout: 5000
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
    const currentText = await this.page.$eval(
      SELECTORS.composeSwitcher,
      (el: any) => el.innerText?.trim() || ''
    ).catch(() => '');

    logger.info(`Current tab: "${currentText}"`);

    // –ï—Å–ª–∏ —É–∂–µ –Ω–∞ "–ß–∞—Ç", –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ò –∫–ª–∞—Å—Å—ã
    if (currentText === '–ß–∞—Ç') {
      logger.info('Chat tab already selected, verifying interface and classes...');

      const hasInterface = await this.page.$(SELECTORS.messageInput).then(el => !!el);

      if (hasInterface) {
        // üî• –ö–†–ò–¢–ò–ß–ù–û: –î–∞–∂–µ –µ—Å–ª–∏ —á–∞—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã!
        const classCheck = await this.page.evaluate(() => {
          const noteContainer = document.querySelector('.js-note');
          return {
            classes: noteContainer?.className,
            isChat: noteContainer?.classList.contains('feed-compose_amojo'),
            isNote: noteContainer?.classList.contains('feed-compose_note')
          };
        });

        logger.info('Current container classes:', classCheck);

        // –ï—Å–ª–∏ –∫–ª–∞—Å—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ - –≤—Å—ë –û–ö, –≤—ã—Ö–æ–¥–∏–º
        if (classCheck.isChat && !classCheck.isNote) {
          logger.info('Chat interface already loaded with correct classes');
          return;
        }

        // –ï—Å–ª–∏ –∫–ª–∞—Å—Å—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é/—Ñ–∏–∫—Å—É
        logger.warn('Chat selected but wrong classes detected, will fix classes...');
      } else {
        logger.warn('Chat tab selected but interface not loaded - reloading...');
      }
    }

    // üî• –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê –ß–ê–¢ —á–µ—Ä–µ–∑ hidden input + –ø—Ä—è–º—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏
    logger.info('Switching to chat using hidden input + direct manipulation...');

    const switchResult = await this.page.evaluate(() => {
      // 1. –ù–∞—Ö–æ–¥–∏–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hidden input
      const hiddenInput = document.querySelector('input[name="feed-compose-switcher"]') as HTMLInputElement;
      if (hiddenInput) {
        hiddenInput.value = 'chat';
        hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));
      }

      // 2. –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Å –∫–ª–∞—Å—Å–æ–º js-switcher-chat
      const chatSwitcher = document.querySelector('.js-switcher-chat') as HTMLElement;

      if (!chatSwitcher) {
        return {
          success: false,
          error: 'Chat switcher not found',
          hiddenInputSet: !!hiddenInput
        };
      }

      // 3. –£–±–∏—Ä–∞–µ–º selected —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      document.querySelectorAll('.tips-item_selected').forEach(el => {
        el.classList.remove('tips-item_selected');
        el.classList.remove('tips-item_selected-keyboard');
      });

      // 4. –î–æ–±–∞–≤–ª—è–µ–º selected –∫ —ç–ª–µ–º–µ–Ω—Ç—É —á–∞—Ç–∞
      chatSwitcher.classList.add('tips-item_selected');

      // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ
      const switcherText = document.querySelector('.feed-compose-switcher__text');
      if (switcherText) {
        switcherText.textContent = '–ß–∞—Ç';
      }

      // 6. –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π
      chatSwitcher.click();

      // 7. –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ
      const switcher = document.querySelector('.feed-compose-switcher');
      if (switcher) {
        switcher.dispatchEvent(new Event('change', { bubbles: true }));
        switcher.dispatchEvent(new Event('click', { bubbles: true }));
      }

      return {
        success: true,
        error: null,
        hiddenInputSet: !!hiddenInput,
        switcherTextUpdated: !!switcherText
      };
    });

    logger.info('Switch result:', switchResult);

    if (!switchResult.success) {
      logger.error('Failed to switch via direct manipulation:', switchResult.error);

      // –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JS –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π amoCRM
      logger.info('Trying last resort: amoCRM internal functions...');

      await this.page.evaluate(() => {
        // –ò—â–µ–º jQuery –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ amoCRM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç jQuery)
        const $ = (window as any).$;
        if ($) {
          const switcher = $('.feed-compose-switcher');
          if (switcher.length) {
            switcher.trigger('change');
            switcher.data('value', 'chat');
          }

          const chatOption = $('.js-switcher-chat');
          if (chatOption.length) {
            chatOption.trigger('click');
          }
        }
      });

      await this.page.waitForTimeout(1000);
    }

    // –ñ–¥—ë–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    await this.page.waitForTimeout(2000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    const newTabText = await this.page.$eval(
      SELECTORS.composeSwitcher,
      (el: any) => el.innerText?.trim() || ''
    ).catch(() => '');

    logger.info(`Tab after switch attempts: "${newTabText}"`);

    if (newTabText !== '–ß–∞—Ç') {
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      const diagnostics = await this.page.evaluate(() => {
        const hiddenInput = document.querySelector('input[name="feed-compose-switcher"]') as HTMLInputElement;
        const switcherText = document.querySelector('.feed-compose-switcher__text');
        const chatSwitcher = document.querySelector('.js-switcher-chat');

        return {
          hiddenInputValue: hiddenInput?.value,
          switcherTextContent: switcherText?.textContent,
          chatSwitcherExists: !!chatSwitcher,
          chatSwitcherClasses: chatSwitcher?.className,
          feedComposeClasses: document.querySelector('.feed-compose')?.className
        };
      });

      logger.error('Diagnostic after switch attempt:', diagnostics);
      await this.takeScreenshot(`error_switch_failed_${Date.now()}.png`);
      throw new Error(`Failed to switch to Chat tab after all attempts. Current: "${newTabText}"`);
    }

    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞
    logger.info('Waiting for chat interface to load...');
    await this.page.waitForTimeout(2000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    const interfaceLoaded = await this.page.waitForSelector(SELECTORS.messageInput, {
      visible: true,
      timeout: 15000
    }).then(() => true).catch(() => false);

    if (!interfaceLoaded) {
      logger.error('Chat interface did not load after switching');
      await this.takeScreenshot(`error_chat_interface_not_loaded_${Date.now()}.png`);
      throw new Error('Chat interface did not load - message input not found');
    }

    // üî• –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –ß–ê–¢–ê
    logger.info('Setting correct chat mode classes...');

    await this.page.evaluate(() => {
      const feedCompose = document.querySelector('.feed-compose');
      const noteContainer = document.querySelector('.js-note');
      const hiddenInput = document.querySelector('input[name="feed-compose-switcher"]') as HTMLInputElement;

      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã —É feed-compose
      if (feedCompose) {
        feedCompose.classList.remove('feed-compose_note', 'feed-compose_task', 'feed-compose_email');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–∞—Ç–∞
      if (noteContainer) {
        noteContainer.className = 'js-note feed-note-fixer feed-compose_amojo internal';
      }

      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ hidden input —Ç–æ–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
      if (hiddenInput) {
        hiddenInput.value = 'chat';
      }
    });

    await this.page.waitForTimeout(500);

    // üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const finalCheck = await this.page.evaluate(() => {
      const feedCompose = document.querySelector('.feed-compose');
      const noteContainer = document.querySelector('.js-note');
      const messageInput = feedCompose?.querySelector('.control-contenteditable__area');
      const hiddenInput = document.querySelector('input[name="feed-compose-switcher"]') as HTMLInputElement;

      return {
        feedComposeClasses: feedCompose?.className,
        noteContainerClasses: noteContainer?.className,
        hasAmojo: noteContainer?.classList.contains('feed-compose_amojo'),
        hasNote: noteContainer?.classList.contains('feed-compose_note'),
        hasTask: noteContainer?.classList.contains('feed-compose_task'),
        messageInputExists: !!messageInput,
        messageInputClasses: messageInput?.className,
        hiddenInputValue: hiddenInput?.value,
        allCorrect: noteContainer?.classList.contains('feed-compose_amojo') &&
                   !noteContainer?.classList.contains('feed-compose_note') &&
                   !noteContainer?.classList.contains('feed-compose_task') &&
                   hiddenInput?.value === 'chat'
      };
    });

    logger.info('üîç Final interface check after class setup:', finalCheck);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if (!finalCheck.allCorrect) {
      logger.error('Failed to set correct chat mode!');
      logger.error('Issues:', {
        hasAmojo: finalCheck.hasAmojo,
        hasNote: finalCheck.hasNote,
        hasTask: finalCheck.hasTask,
        hiddenInput: finalCheck.hiddenInputValue
      });
      await this.takeScreenshot(`error_wrong_classes_${Date.now()}.png`);
      throw new Error('Failed to set correct chat mode classes');
    }

    if (!finalCheck.messageInputExists) {
      logger.error('Message input not found after setup');
      await this.takeScreenshot(`error_no_message_input_${Date.now()}.png`);
      throw new Error('Message input not found');
    }

    logger.info('‚úÖ Chat tab opened, interface loaded, and classes set correctly');

  } catch (error) {
    logger.error('Failed to open chat:', error);
    await this.takeScreenshot(`error_open_chat_${Date.now()}.png`);
    throw error;
  }
}

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
   */
  async sendChatMessage(messageText: string): Promise<void> {
    logger.info('Sending chat message...');

    try {
      // 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç (—Ç–µ–ø–µ—Ä—å –æ–Ω —Å–∞–º –¥–æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
      await this.openChat();

      // 2. –î–∞–µ–º –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      await this.page.waitForTimeout(3000);

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const recipientStatus = await this.checkIfRecipientNeeded();

      logger.info('Recipient status:', recipientStatus);

      if (recipientStatus.needsSelection) {
        logger.info('Attempting to select recipient...');

        // –ü—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        // –î–ª—è Telegram-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        try {
          await this.selectRecipient();
        } catch (error: any) {
          logger.info('Recipient selection skipped (likely auto-selected for Telegram):', error.message);
        }
      } else {
        logger.info(`Recipient already selected: "${recipientStatus.currentRecipient}"`);
      }

      // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —É–¥–∞–ª—Å—è)
      await this.sendMessage(messageText);

      logger.info('Chat message sent successfully');
    } catch (error: any) {
      logger.error('Failed to send chat message:', error);
      await this.takeScreenshot(`error_chat_${Date.now()}.png`);
      throw new Error(`Failed to send chat message: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   */
  private async checkIfRecipientNeeded(): Promise<{
    needsSelection: boolean;
    currentRecipient: string;
  }> {
    logger.info('Checking if recipient selection needed...');

    try {
      const recipientInfo = await this.page.evaluate((selector) => {
        const userElement = document.querySelector(selector);

        if (!userElement) {
          return {
            exists: false,
            hasRecipient: false,
            text: '',
            dataId: null,
            isVisible: false
          };
        }

        const text = userElement.textContent?.trim() || '';
        const dataId = userElement.getAttribute('data-id');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
        const rect = userElement.getBoundingClientRect();
        const isVisible = rect.width > 0 && rect.height > 0;

        // –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –µ—Å–ª–∏:
        // 1. –ï—Å—Ç—å data-id
        // 2. data-id –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "undefined"
        // 3. –ï—Å—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º
        const hasValidRecipient = !!(
          dataId &&
          dataId.length > 0 &&
          !dataId.includes('undefined') &&
          text.length > 0
        );

        return {
          exists: true,
          hasRecipient: hasValidRecipient,
          text: text,
          dataId: dataId,
          isVisible: isVisible
        };
      }, SELECTORS.userSelector);

      logger.info('Recipient check details:', recipientInfo);

      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å
      if (!recipientInfo.exists) {
        return {
          needsSelection: true,
          currentRecipient: 'not found'
        };
      }

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω - –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
      if (recipientInfo.hasRecipient) {
        return {
          needsSelection: false,
          currentRecipient: recipientInfo.text
        };
      }

      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –µ—Å—Ç—å –Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω - –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å
      return {
        needsSelection: true,
        currentRecipient: 'empty'
      };

    } catch (error) {
      logger.error('Error checking recipient:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å
      return {
        needsSelection: true,
        currentRecipient: 'error'
      };
    }
  }

  /**
   * –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   */
  private async selectRecipient(): Promise<void> {
    logger.info('Selecting recipient...');

    const recipientSelector = '.multisuggest__suggest-item';

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ò –í–ò–î–ï–ù
      const userSelectorInfo = await this.page.evaluate((selector) => {
        const el = document.querySelector(selector);
        if (!el) {
          return { exists: false, visible: false };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
        const rect = el.getBoundingClientRect();
        const style = window.getComputedStyle(el);
        const isVisible = rect.width > 0 &&
                         rect.height > 0 &&
                         style.display !== 'none' &&
                         style.visibility !== 'hidden' &&
                         (el as HTMLElement).offsetHeight > 0;

        return {
          exists: true,
          visible: isVisible,
          offsetHeight: (el as HTMLElement).offsetHeight,
          rect: { width: rect.width, height: rect.height },
          display: style.display,
          visibility: style.visibility
        };
      }, SELECTORS.userSelector);

      logger.info('User selector visibility check:', userSelectorInfo);

      if (!userSelectorInfo.exists || !userSelectorInfo.visible) {
        logger.info('User selector not found or not visible - recipient likely pre-selected');
        logger.info('This is normal for Telegram integrations where recipient is automatic');

        // –î–ª—è Telegram-—á–∞—Ç–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        return;
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      const selectorInfo = await this.page.evaluate((selector) => {
        const el = document.querySelector(selector);
        if (!el) return { exists: false };

        const rect = el.getBoundingClientRect();
        const dataId = el.getAttribute('data-id');
        const text = el.textContent?.trim() || '';

        return {
          exists: true,
          visible: rect.width > 0 && rect.height > 0,
          dataId: dataId,
          text: text,
          hasRecipient: !!(dataId && dataId.length > 0 && !dataId.includes('undefined') && text)
        };
      }, SELECTORS.userSelector);

      logger.info('User selector state:', selectorInfo);

      // 3. –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω, –Ω–µ –∫–ª–∏–∫–∞–µ–º
      if (selectorInfo.hasRecipient) {
        logger.info(`Recipient already selected: "${selectorInfo.text}", skipping click`);
        return;
      }

      // 4. –ö–ª–∏–∫–∞–µ–º –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      logger.info('Clicking user selector to open recipient list...');
      await this.page.evaluate((selector) => {
        const el = document.querySelector(selector) as HTMLElement;
        if (el) el.click();
      }, SELECTORS.userSelector);

      await this.page.waitForTimeout(2000);

      // 5. –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      logger.info('Waiting for recipient list...');
      const recipientElement = await this.page.waitForSelector(recipientSelector, {
        timeout: 10000,
        visible: true
      }).catch(() => null);

      if (recipientElement) {
        logger.info('Recipient list appeared, selecting first recipient...');

        // –ö–ª–∏–∫–∞–µ–º —á–µ—Ä–µ–∑ evaluate
        await this.page.evaluate((selector) => {
          const el = document.querySelector(selector) as HTMLElement;
          if (el) el.click();
        }, recipientSelector);

        await this.page.waitForTimeout(1000);
        logger.info('Recipient selected successfully');
      } else {
        logger.info('Recipient list did not appear - recipient already selected by default');
      }
    } catch (error: any) {
      logger.error('Error in selectRecipient:', error.message);
      await this.takeScreenshot(`error_select_recipient_${Date.now()}.png`);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ - –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
      throw error;
    }
  }




/**
 * –í–≤–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
private async sendMessage(messageText: string): Promise<void> {
  logger.info('Typing and sending message...');

  try {
    // üî• –®–ê–ì 1: –ö–†–ò–¢–ò–ß–ù–û - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    await this.page.evaluate(() => {
      const feedCompose = document.querySelector('.feed-compose');
      const noteContainer = document.querySelector('.js-note');
      const hiddenInput = document.querySelector('input[name="feed-compose-switcher"]');

      if (feedCompose) {
        feedCompose.classList.remove('feed-compose_note', 'feed-compose_task', 'feed-compose_email');
      }

      if (noteContainer) {
        noteContainer.className = 'js-note feed-note-fixer feed-compose_amojo internal';
      }

      if (hiddenInput) {
        (hiddenInput as HTMLInputElement).value = 'chat';
      }
    });

    await this.page.waitForTimeout(500);

    // üî• –®–ê–ì 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞—Å—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    const modeCheck = await this.page.evaluate(() => {
      const noteContainer = document.querySelector('.js-note');
      const hiddenInput = document.querySelector('input[name="feed-compose-switcher"]');

      return {
        containerClasses: noteContainer?.className,
        hiddenInputValue: hiddenInput ? (hiddenInput as HTMLInputElement).value : null,
        hasAmojo: noteContainer?.classList.contains('feed-compose_amojo'),
        hasNote: noteContainer?.classList.contains('feed-compose_note'),
      };
    });

    logger.info('üîç Mode after class setup:', modeCheck);

    if (!modeCheck.hasAmojo || modeCheck.hasNote) {
      logger.error('Failed to set correct chat mode classes!');
      await this.takeScreenshot(`error_wrong_classes_${Date.now()}.png`);
      throw new Error('Failed to set chat mode - wrong container classes');
    }

    // üî• –®–ê–ì 3: –°–¢–ê–†–´–ô –°–ü–û–°–û–ë - evaluate –≤ —á–∏—Å—Ç–æ–º JS –±–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    const sendResult = await this.page.evaluate(function(message) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å function –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
      var inputSelector = '.control-contenteditable__area.feed-compose__message';
      var buttonSelector = '.js-note-submit.feed-note__button';

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      var inputField = document.querySelector(inputSelector);
      if (!inputField) {
        return { success: false, error: 'Input field not found' };
      }

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª–µ
      inputField.click();
      inputField.focus();

      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —á–µ—Ä–µ–∑ selection
      var range = document.createRange();
      range.selectNodeContents(inputField);
      var selection = window.getSelection();
      if (selection) {
        selection.removeAllRanges();
        selection.addRange(range);
      }
      document.execCommand('delete');

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (busy wait)
      var start = Date.now();
      while (Date.now() - start < 100) {
        // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      }

      // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ execCommand
      document.execCommand('insertText', false, message);

      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è
      inputField.dispatchEvent(new Event('input', { bubbles: true }));
      inputField.dispatchEvent(new Event('change', { bubbles: true }));
      inputField.dispatchEvent(new KeyboardEvent('keyup', { bubbles: true }));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–∏–ª—Å—è
      var insertedText = inputField.textContent ? inputField.textContent.trim() : '';

      // –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
      function normalize(text) {
        if (!text) return '';
        return text.replace(/\r?\n/g, '').replace(/\s+/g, ' ').trim();
      }

      if (normalize(insertedText) !== normalize(message)) {
        return {
          success: false,
          error: 'Text not inserted correctly',
          expected: message,
          actual: insertedText
        };
      }

      // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
      var sendButton = document.querySelector(buttonSelector);
      if (!sendButton) {
        return { success: false, error: 'Send button not found' };
      }

      // –£–±–∏—Ä–∞–µ–º disabled –µ—Å–ª–∏ –µ—Å—Ç—å
      sendButton.classList.remove('button-input-disabled');
      sendButton.disabled = false;

      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å
      sendButton.scrollIntoView({ behavior: 'smooth', block: 'center' });

      // –ö–ª–∏–∫–∞–µ–º
      sendButton.click();

      return {
        success: true,
        insertedText: insertedText
      };
    }, messageText);

    logger.info('Send result:', sendResult);

    if (!sendResult.success) {
      logger.error('Failed to send:', sendResult.error);
      if (sendResult.expected && sendResult.actual) {
        logger.error('Expected text:', sendResult.expected);
        logger.error('Actual text:', sendResult.actual);
      }
      await this.takeScreenshot(`error_send_failed_${Date.now()}.png`);
      throw new Error(`Failed to send message: ${sendResult.error}`);
    }

    logger.info('Message inserted successfully, waiting for send...');

    // –ñ–¥–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
    await this.page.waitForTimeout(2000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–µ –æ—á–∏—Å—Ç–∏–ª–æ—Å—å (–ø—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
    const cleared = await this.page.$eval(
      SELECTORS.messageInput,
      (el: any) => !el.textContent?.trim()
    ).catch(() => false);

    if (cleared) {
      logger.info('‚úÖ Message sent successfully');
    } else {
      logger.warn('‚ö†Ô∏è Message may not have been sent - input not cleared');
      await this.takeScreenshot(`warning_not_cleared_${Date.now()}.png`);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      const inputContent = await this.page.$eval(
        SELECTORS.messageInput,
        (el: any) => el.textContent || ''
      ).catch(() => '');

      logger.warn('Input content after send:', inputContent);
    }

  } catch (error: any) {
    logger.error('Failed to send message:', error);
    await this.takeScreenshot(`error_send_message_${Date.now()}.png`);
    throw new Error(`Failed to send message: ${error.message}`);
  }
}

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
   */
  async addNote(noteText: string): Promise<void> {
    logger.info('Adding note...');

    try {
      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –µ—Å–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ
      await this.expandChatIfMinimized();

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      await this.page.hover(SELECTORS.composeSwitcher);
      await this.page.waitForTimeout(1000);

      await this.page.evaluate((selector) => {
        const el = document.querySelector(selector) as HTMLElement;
        if (el) el.click();
      }, SELECTORS.noteOption);

      await this.page.waitForTimeout(500);

      // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
      await this.page.type(SELECTORS.messageInput, noteText);
      await this.page.click(SELECTORS.sendButton);
      await this.page.waitForTimeout(1000);

      logger.info('Note added successfully');
    } catch (error) {
      logger.error('Failed to add note:', error);
      await this.takeScreenshot(`error_note_${Date.now()}.png`);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  async createTask(taskText: string): Promise<void> {
    logger.info('Creating task...');

    try {
      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –µ—Å–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ
      await this.expandChatIfMinimized();

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞—á–∏
      await this.page.hover(SELECTORS.composeSwitcher);
      await this.page.waitForTimeout(1000);

      await this.page.evaluate((selector) => {
        const el = document.querySelector(selector) as HTMLElement;
        if (el) el.click();
      }, SELECTORS.taskOption);

      await this.page.waitForTimeout(500);

      // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
      await this.page.type(SELECTORS.taskInput, taskText);
      await this.page.click(SELECTORS.taskButton);
      await this.page.waitForTimeout(1000);

      logger.info('Task created successfully');
    } catch (error) {
      logger.error('Failed to create task:', error);
      await this.takeScreenshot(`error_task_${Date.now()}.png`);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
   */
  async takeScreenshot(filename: string): Promise<string> {
    try {
      const screenshotPath = `logs/screenshots/${filename}`;
      await this.page.screenshot({
        path: screenshotPath,
        fullPage: true
      });
      logger.info(`Screenshot saved: ${screenshotPath}`);
      return screenshotPath;
    } catch (error) {
      logger.error('Failed to take screenshot:', error);
      return '';
    }
  }
}