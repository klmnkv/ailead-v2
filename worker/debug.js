// worker/debug-all.js
// Worker –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import Bull from 'bull';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
dotenv.config({ path: resolve(__dirname, '.env') });

console.log('üîç Debug Worker –¥–ª—è –í–°–ï–• —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á\n');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
const messageQueue = new Bull('messages', {
  redis: {
    host: 'redis-10061.c246.us-east-1-4.ec2.redns.redis-cloud.com',
    port: 10061,
    password: 'zcQInFWwyBQI86KCi0tov587e8uu7B2C'
  }
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º MessageProcessor
import('./src/services/MessageProcessor.js').then(module => {
  const MessageProcessor = module.MessageProcessor;
  const processor = new MessageProcessor();

  console.log('‚úÖ MessageProcessor –∑–∞–≥—Ä—É–∂–µ–Ω\n');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ë–ï–ó —Ç–∏–ø–∞ (default)
  messageQueue.process(1, async (job) => {
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ Job #${job.id} (—Ç–∏–ø: DEFAULT)`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
    console.log('  account_id:', job.data.account_id);
    console.log('  lead_id:', job.data.lead_id);
    console.log('  message:', job.data.message_text?.substring(0, 50));

    try {
      const result = await processor.process(job);
      console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!');
      return result;
    } catch (error) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
      throw error;
    }
  });

  // –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ç–∏–ø–æ–º 'send-message'
  messageQueue.process('send-message', 1, async (job) => {
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ Job #${job.id} (—Ç–∏–ø: send-message)`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
    console.log('  account_id:', job.data.account_id);
    console.log('  lead_id:', job.data.lead_id);
    console.log('  message:', job.data.message_text?.substring(0, 50));

    try {
      const result = await processor.process(job);
      console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!');
      return result;
    } catch (error) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
      throw error;
    }
  });

  console.log('‚úÖ Worker –∑–∞–ø—É—â–µ–Ω –¥–ª—è –û–ë–û–ò–• —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á:');
  console.log('   - DEFAULT (–±–µ–∑ —Ç–∏–ø–∞)');
  console.log('   - send-message');
  console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...\n');

}).catch(error => {
  console.error('‚ùå –ù–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å MessageProcessor:', error);
});