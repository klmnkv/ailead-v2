#!/usr/bin/env node

const axios = require('axios');
const readline = require('readline');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = process.env.API_URL || 'http://localhost:4000';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

function log(msg, color = 'reset') {
  console.log(`${colors[color]}${msg}${colors.reset}`);
}

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
async function prompt(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  return new Promise(resolve => {
    rl.question(question, answer => {
      rl.close();
      resolve(answer);
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
async function checkApiHealth() {
  try {
    log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...', 'cyan');
    const response = await axios.get(`${API_URL}/health`, { timeout: 5000 });

    if (response.status === 200) {
      log('‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç', 'green');
      return true;
    }
  } catch (error) {
    log('‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'red');
    log(`   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd api && npm run dev`, 'yellow');
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
async function getIntegrations() {
  try {
    const response = await axios.get(`${API_URL}/api/integrations`);
    return response.data || [];
  } catch (error) {
    return [];
  }
}

// –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API
async function testApiSend(accountId, leadId, message) {
  try {
    log('\nüì® –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ AMO API...', 'cyan');

    const response = await axios.post(
      `${API_URL}/api/messages/send`,
      {
        account_id: parseInt(accountId),
        lead_id: parseInt(leadId),
        message_text: message,
        priority: 'high'
      },
      {
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );

    const jobId = response.data.job_id;
    log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: Job ID ${jobId}`, 'green');

    // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...', 'yellow');

    for (let i = 0; i < 30; i++) {
      await new Promise(r => setTimeout(r, 1000));

      try {
        const status = await axios.get(`${API_URL}/api/queue/job/${jobId}`);
        const job = status.data;

        if (job.status === 'completed') {
          log('\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'green');
          log(`   –ú–µ—Ç–æ–¥: ${job.result?.method || 'unknown'}`, 'blue');
          log(`   –í—Ä–µ–º—è: ${job.result?.processing_time || 'N/A'}ms`, 'blue');
          return true;
        } else if (job.status === 'failed') {
          log('\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', 'red');
          log(`   ${job.error || 'Unknown error'}`, 'red');
          return false;
        }
      } catch (e) {
        // Job –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è
        continue;
      }
    }

    log('\n‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è', 'yellow');
    return false;
  } catch (error) {
    log(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red');
    if (error.response) {
      log(`   –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data)}`, 'red');
    }
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function checkConfig() {
  log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...', 'cyan');

  const required = [
    'AMO_CLIENT_ID',
    'AMO_CLIENT_SECRET',
    'AMO_USE_API'
  ];

  const missing = [];
  for (const key of required) {
    if (!process.env[key]) {
      missing.push(key);
    }
  }

  if (missing.length > 0) {
    log('‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', 'yellow');
    missing.forEach(key => log(`   - ${key}`, 'yellow'));
    log('\n   –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env', 'blue');
    return false;
  }

  log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ', 'green');
  return true;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó', 'bright');
  log('‚ïë      AMO API Test Script                ‚ïë', 'bright');
  log('‚ïë      –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏       ‚ïë', 'bright');
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù', 'bright');

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if (!checkConfig()) {
    log('\nüí° –°–æ–≤–µ—Ç: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ', 'cyan');
    return;
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  const apiOk = await checkApiHealth();
  if (!apiOk) {
    process.exit(1);
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
  log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...', 'cyan');
  const integrations = await getIntegrations();

  if (integrations.length > 0) {
    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: ${integrations.length}`, 'green');
    integrations.forEach((int, i) => {
      log(`   ${i + 1}. Account ${int.amocrm_account_id} - ${int.status}`, 'blue');
    });
  } else {
    log('‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'yellow');
    log('   –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API', 'yellow');
  }

  // 4. –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
  log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');
  log('  –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò', 'bright');
  log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');

  let accountId, leadId, message;

  if (integrations.length > 0) {
    const useFirst = await prompt(`\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Account ${integrations[0].amocrm_account_id}? (y/n): `);
    if (useFirst.toLowerCase() === 'y') {
      accountId = integrations[0].amocrm_account_id;
    }
  }

  if (!accountId) {
    accountId = await prompt('üìù –í–≤–µ–¥–∏—Ç–µ Account ID: ');
  }

  leadId = await prompt('üìù –í–≤–µ–¥–∏—Ç–µ Lead ID: ');
  message = await prompt('üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (Enter –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ): ') ||
            `–¢–µ—Å—Ç AMO API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${new Date().toLocaleTimeString()} üöÄ`;

  // 5. –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
  const method = await prompt('\nüìå –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ (api/puppeteer/auto) [auto]: ') || 'auto';

  if (method !== 'auto') {
    process.env.AMO_SEND_METHOD = method;
  }

  // 6. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
  const success = await testApiSend(accountId, leadId, message);

  // 7. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');
  log('  –†–ï–ó–£–õ–¨–¢–ê–¢–´', 'bright');
  log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');

  if (success) {
    log('\n‚ú® –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!', 'green');
    log('   AMO API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
    log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'cyan');
    log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AmoCRM', 'blue');
    log('   2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f worker/logs/app.log', 'blue');
    log('   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AMO_SEND_METHOD=api –≤ .env', 'blue');
  } else {
    log('\n‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏', 'yellow');
    log('\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:', 'cyan');
    log('   1. –¢–æ–∫–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã', 'blue');
    log('   2. Lead ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ AmoCRM', 'blue');
    log('   3. Worker –∑–∞–ø—É—â–µ–Ω: cd worker && npm run dev', 'blue');
    log('   4. –õ–æ–≥–∏ worker –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏', 'blue');
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  console.error(error);
  process.exit(1);
});