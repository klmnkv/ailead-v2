import { Router } from 'express';
import { Op } from 'sequelize'; // ‚Üê –î–û–ë–ê–í–ò–õ–ò –≠–¢–û–¢ –ò–ú–ü–û–†–¢
import { Integration } from '../models/Integration.js';
import { logger } from '../utils/logger.js';

const router = Router();

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–≥–∏–Ω–∞
 * POST /api/webhook/plugin-status
 */
router.post('/plugin-status', async (req, res) => {
    try {
        const { client_id, domain } = req.body;

        logger.info('üì• Plugin status check', { client_id, domain });

        if (!domain) {
            return res.json({ status: -1 });
        }

        // –ò—â–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–æ –¥–æ–º–µ–Ω—É –ò–õ–ò –ø–æ base_url (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π)
        const integration = await Integration.findOne({
            where: {
                [Op.or]: [
                    { domain: domain },
                    { base_url: `https://${domain}` }
                ]
            }
        });

        if (!integration) {
            logger.info('‚ùå Integration not found');
            return res.json({ status: -1 });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        const now = Math.floor(Date.now() / 1000);

        if (integration.status === 'active' && integration.token_expiry > now) {
            logger.info('‚úÖ Integration active');
            return res.json({ status: 1 });
        }

        logger.info('‚ö†Ô∏è Integration registered but not active');
        return res.json({ status: 0 });

    } catch (error: any) {
        logger.error('‚ùå Plugin status check error', error);
        return res.json({ status: -1 });
    }
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏–¥–∞
 * POST /api/webhook/bot-status
 */
router.post('/bot-status', async (req, res) => {
    try {
        const { lead_id, domain } = req.body;

        logger.info('üì• Bot status check', { lead_id, domain });

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –¥–ª—è –ª–∏–¥–∞
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏–¥–∞

        res.json({ status: false });

    } catch (error: any) {
        logger.error('‚ùå Bot status check error', error);
        res.json({ status: false });
    }
});

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
 * POST /api/webhook/bot-switch
 */
router.post('/bot-switch', async (req, res) => {
    try {
        const { lead_id, domain } = req.body;

        logger.info('üì• Bot switch', { lead_id, domain });

        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ª–∏–¥–∞

        res.json({ status: true });

    } catch (error: any) {
        logger.error('‚ùå Bot switch error', error);
        res.json({ status: false });
    }
});

/**
 * Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç amoCRM
 * POST /api/webhook
 */
router.post('/', async (req, res) => {
    try {
        const events = req.body;

        logger.info('üì• Webhook received', {
            count: events?.length || 0
        });

        // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π webhook

        res.status(200).send('OK');

    } catch (error: any) {
        logger.error('‚ùå Webhook processing error', error);
        res.status(500).send('Error');
    }
});

export default router;