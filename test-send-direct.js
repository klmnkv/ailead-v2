// test-send-direct.js
// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É /api/integrations)

const axios = require('axios');
const readline = require('readline');

const API_URL = 'http://localhost:4000';

// –ò–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤ –≤–∏–¥–Ω–æ, —á—Ç–æ account_id = 32181490
const DEFAULT_ACCOUNT_ID = 32181490;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const c = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(msg, color = 'reset') {
  console.log(`${c[color]}${msg}${c.reset}`);
}

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
async function prompt(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  return new Promise(resolve => {
    rl.question(question, answer => {
      rl.close();
      resolve(answer);
    });
  });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(accountId, leadId, message) {
  try {
    log('\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...', 'cyan');
    log(`   Account: ${accountId}`, 'blue');
    log(`   Lead ID: ${leadId}`, 'blue');
    log(`   –¢–µ–∫—Å—Ç: "${message}"`, 'blue');

    const startTime = Date.now();

    const response = await axios.post(
      `${API_URL}/api/messages/send`,
      {
        account_id: parseInt(accountId),
        lead_id: parseInt(leadId),
        message_text: message,
        priority: 'high'
      },
      {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000
      }
    );

    const jobId = response.data.job_id;
    log(`\n‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: Job ID ${jobId}`, 'green');

    // –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...', 'yellow');

    for (let i = 0; i < 60; i++) {
      await new Promise(r => setTimeout(r, 1000));
      process.stdout.write('.');

      try {
        const statusResponse = await axios.get(`${API_URL}/api/queue/job/${jobId}`);
        const job = statusResponse.data;

        if (job.status === 'completed') {
          const elapsed = Date.now() - startTime;

          log('\n\n‚ú® –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –£–°–ü–ï–®–ù–û!', 'green');
          log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'green');
          log(`   –í—Ä–µ–º—è: ${elapsed}ms`, 'cyan');
          log(`   –ú–µ—Ç–æ–¥: ${job.result?.method || 'unknown'}`, 'cyan');

          if (job.result?.method === 'api') {
            log('   üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω AMO API', 'green');
          } else if (job.result?.method === 'puppeteer') {
            log('   üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Puppeteer', 'yellow');
          }

          return true;
        } else if (job.status === 'failed') {
          log('\n\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', 'red');
          log(`   ${job.failedReason || job.error || 'Unknown'}`, 'red');
          return false;
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
      }
    }

    log('\n\n‚è±Ô∏è –¢–∞–π–º–∞—É—Ç', 'yellow');
    return false;

  } catch (error) {
    log(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red');
    if (error.response?.data) {
      log(`   ${JSON.stringify(error.response.data)}`, 'red');
    }
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó', 'bright');
  log('‚ïë     –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è       ‚ïë', 'bright');
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù', 'bright');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  try {
    const response = await axios.get(`${API_URL}/health`);
    log('\n‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç', 'green');
  } catch (error) {
    log('\n‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'red');
    log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd api && npm run dev', 'yellow');
    process.exit(1);
  }

  log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');
  log('  –ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–ê', 'bright');
  log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');

  log(`\nüìå –ò—Å–ø–æ–ª—å–∑—É–µ–º Account ID: ${DEFAULT_ACCOUNT_ID}`, 'cyan');
  log('   (–∏–∑ –≤–∞—à–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ kirilltihiy.amocrm.ru)', 'blue');

  const leadId = await prompt('\nüìù –í–≤–µ–¥–∏—Ç–µ Lead ID –∏–∑ AmoCRM: ');

  if (!leadId) {
    log('‚ùå Lead ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'red');
    process.exit(1);
  }

  const message = await prompt('üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (Enter –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ): ') ||
                  `–¢–µ—Å—Ç ${new Date().toLocaleString('ru-RU')} üöÄ`;

  // –û—Ç–ø—Ä–∞–≤–∫–∞
  log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');
  log('  –û–¢–ü–†–ê–í–ö–ê', 'bright');
  log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', 'blue');

  const success = await sendMessage(DEFAULT_ACCOUNT_ID, leadId, message);

  if (success) {
    log('\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!', 'green');
    log('\nüìå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AmoCRM:', 'cyan');
    log(`   https://kirilltihiy.amocrm.ru/leads/detail/${leadId}`, 'blue');
  } else {
    log('\n‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏', 'yellow');
    log('\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:', 'cyan');
    log('   1. Worker –∑–∞–ø—É—â–µ–Ω?', 'blue');
    log('   2. Lead ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', 'blue');
    log('   3. –õ–æ–≥–∏ worker –¥–ª—è –¥–µ—Ç–∞–ª–µ–π', 'blue');
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log(`\nüí• –û—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
});